[versions]
# Plugins
kotlin = "1.7.20"
mokoRes = "0.20.1"
androidBuild = "7.2.2"
kezongFatAar = "1.3.8"
nexusPublish = "1.1.0"
mockmp = "1.10.0"
# Android / Compose
composeCompilerPlugin = "1.4.0-alpha01"
composeCompilerLib = "1.3.2"
compose = "1.3.1"
composeJunit = "1.0.5"
androidLegacy = "1.0.0"
androidKTX = "1.8.0"
androidNavigation = "2.5.2"
composeViewModel = "2.4.1"
androidConstraintlayout = "2.1.3"
androidActivityCompose = "1.4.0"
androidAppcompat = "1.4.1"
androidMaterial = "1.7.0"
# Kotlin(x)
coroutines = "1.6.4"
ktor = "2.2.2"
serialization = "1.4.0"
# Others
coil = "1.3.1"
koin = "3.2.2"
# Testing
junit = "4.13.2"
turbine = "0.12.1"
robolectric = "4.8.2"
androidTestCore = "1.4.0"
androidTestJunit = "1.1.5"
slf4j = "1.7.36"

[libraries]
# Kotlin(x)
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }

ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-encoding = { module = "io.ktor:ktor-client-encoding", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

# Android
android-legacy = { module = "androidx.legacy:legacy-support-v4", version.ref = "androidLegacy" }
android-material = { module = "com.google.android.material:material", version.ref = "androidMaterial" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidActivityCompose" }
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "androidKTX" }

androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "composeViewModel" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidAppcompat" }
androidx-constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "androidConstraintlayout" }
androidx-navigation-runtime-ktx = { module = "androidx.navigation:navigation-runtime-ktx", version.ref = "androidNavigation" }
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "androidNavigation" }

# Compose
compose-compiler = { module = "androidx.compose.compiler:compiler", version.ref = "composeCompilerLib" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-core = { module = "androidx.compose.ui:ui", version.ref = "compose" }
compose-ui-test = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "composeJunit" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
compose-material-core = { module = "androidx.compose.material:material", version.ref = "compose" }
compose-material-icons-core = { module = "androidx.compose.material:material-icons-core", version.ref = "compose" }
compose-material-icons-extended = { module = "androidx.compose.material:material-icons-extended", version.ref = "compose" }
compose-runtime-livedata = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "compose" }
compose-runtime-rxjava2 = { module = "androidx.compose.runtime:runtime-rxjava2", version.ref = "compose" }
# Moko
moko-resources-android = { module = "dev.icerock.moko:resources-android", version.ref = "mokoRes" }
moko-resources-core = { module = "dev.icerock.moko:resources", version.ref = "mokoRes" }
# Others
coil-compose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
coil-svg = { module = "io.coil-kt:coil-svg", version.ref = "coil" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
# Testing
kotlin-test-common = { module = "org.jetbrains.kotlin:kotlin-test-common", version.ref = "kotlin" }
kotlin-test-annotation-common = { module = "org.jetbrains.kotlin:kotlin-test-annotations-common", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
test-junit = { module = "junit:junit", version.ref = "junit" }
test-turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
test-kotlin-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
test-android-core = { module = "androidx.test:core", version.ref = "androidTestCore" }
test-android-robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric" }
test-android-junit = { module = "androidx.test.ext:junit", version.ref = "androidTestJunit" }
test-slf4j-nop = { module = "org.slf4j:slf4j-nop", version.ref = "slf4j" }

[plugins]
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
moko-resources = { id = "dev.icerock.mobile.multiplatform-resources", version.ref = "mokoRes" }
android-library = { id = "com.android.library", version.ref = "androidBuild" }
nexus-publish = { id = "io.github.gradle-nexus.publish-plugin", version.ref = "nexusPublish" }
kosi-mockmp = { id = "org.kodein.mock.mockmp", version.ref = "mockmp" }
