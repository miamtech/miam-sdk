"use strict";(self.webpackChunkmiam_sdk_doc=self.webpackChunkmiam_sdk_doc||[]).push([[749],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>v});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,v=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return t?a.createElement(v,i(i({ref:n},d),{},{components:t})):a.createElement(v,i({ref:n},d))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={},i="Link",l={unversionedId:"android/advanced/deepLink",id:"android/advanced/deepLink",title:"Link",description:"DeepLink",source:"@site/docs/android/advanced/deepLink.md",sourceDirName:"android/advanced",slug:"/android/advanced/deepLink",permalink:"/kmm-miam-sdk/docs/android/advanced/deepLink",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"androidSidebar",previous:{title:"Availability",permalink:"/kmm-miam-sdk/docs/android/advanced/availability"},next:{title:"Groceries list",permalink:"/kmm-miam-sdk/docs/android/advanced/groceries-list-handler"}},c={},s=[{value:"DeepLink",id:"deeplink",level:2},{value:"Direct Link",id:"direct-link",level:2}],d={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"link"},"Link"),(0,r.kt)("h2",{id:"deeplink"},"DeepLink"),(0,r.kt)("p",null,"Miam provide a bind function on catalog that show desired categories.\nit's design to be use with deeplink just pass ",(0,r.kt)("strong",{parentName:"p"},"MIAM_CATEGORY_ID")," as parametter in your link then bind it lkie this : "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"Catalog(this@MainActivity).apply { bind(MIAM_CATEGORY_ID) }.Content()\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can find miam categories id on our back office    ",(0,r.kt)("a",{target:"https://partners.miam.tech/",href:"https://partners.miam.tech/"}," ",(0,r.kt)("strong",{parentName:"p"},"miam partner"))," ")),(0,r.kt)("h2",{id:"direct-link"},"Direct Link"),(0,r.kt)("p",null,"You can also use this feature directly in the application, for that you need\nto get current active catalog's categories that you can get by passing a callback :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"PointOfSaleHandler.getCatalogCategories(::updateCategory)\n")),(0,r.kt)("p",null,"An example of full implementation with compose :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},' class LinkDropDownMenu(val navigateTo: (id: String) -> Unit) {\n\n    private val categoriesState: MutableState<List<CatalogCategory>> =\n        mutableStateOf(listOf())\n\n    init {\n        PointOfSaleHandler.getCatalogCategories(::fetchCategory)\n    }\n\n    private fun fetchCategory(categories: List<CatalogCategory>) {\n        categoriesState.value = categories\n    }\n\n    @Composable\n    fun Content() {\n\n        val expanded = remember { mutableStateOf(false) }\n\n        Box {\n            IconButton(onClick = {\n                expanded.value = true\n            }) {\n                Icon(\n                    Icons.Filled.MoreVert,\n                    contentDescription = "More Menu"\n                )\n            }\n            DropdownMenu(\n                expanded = expanded.value,\n                onDismissRequest = { expanded.value = false }\n            ) {\n\n                categoriesState.value.forEach {\n                    DropdownMenuItem(onClick = {\n                        navigateTo(it.id)\n                        expanded.value = false\n                    }) {\n                        Text(it.title)\n                    }\n                }\n            }\n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MainActivity: ComponentActivity() {\n    \n    private val routes = listOf(\n        Route("home", "home", Icons.Filled.Home),\n        Route("Catalogue", "catalogCategories", Icons.Filled.Book),\n    )\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        setContent {\n            val navController = rememberNavController()\n            val navBackStackEntry by navController.currentBackStackEntryAsState()\n            val currentDestination = navBackStackEntry?.destination\n             Scaffold(\n                topBar = {\n                    actions = { \n                        LinkDropDownMenu {\n                            navController.navigate("catalog/$it") {\n                            popUpTo(navController.graph.findStartDestination().id) {\n                                saveState = true\n                            }\n                            launchSingleTop = true\n                            restoreState = true\n                            }\n                        }.Content()\n                    }\n                }\n            )\n            {\n                NavHost( navController = navController, startDestination = "home") {\n                    composable("home") {\n                        Box {\n                            Home()\n                        }\n                    }\n                    composable("catalog/{Id}") {\n                        Catalog(this@MainActivity).apply { bind(it.arguments?.getString("Id") ?: "", "") }.Content()\n                    }\n                }\n            }\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);