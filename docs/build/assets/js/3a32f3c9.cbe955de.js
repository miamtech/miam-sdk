"use strict";(self.webpackChunkmiam_sdk_doc=self.webpackChunkmiam_sdk_doc||[]).push([[230],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),p=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return i.createElement(c.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||a;return t?i.createElement(g,o(o({ref:n},l),{},{components:t})):i.createElement(g,o({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=t(7462),r=(t(7294),t(3905));const a={},o="Components injection",s={unversionedId:"android/usage/component-injection",id:"android/usage/component-injection",title:"Components injection",description:"There are two ways to inject Miam components into the host app:",source:"@site/docs/android/usage/component-injection.md",sourceDirName:"android/usage",slug:"/android/usage/component-injection",permalink:"/kmm-miam-sdk/docs/android/usage/component-injection",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"androidSidebar",previous:{title:"Usage",permalink:"/kmm-miam-sdk/docs/category/usage"},next:{title:"Styling",permalink:"/kmm-miam-sdk/docs/android/usage/styling"}},c={},p=[{value:"With Jetpack Compose (preferred)",id:"with-jetpack-compose-preferred",level:2},{value:"With XML injection",id:"with-xml-injection",level:2}],l={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"components-injection"},"Components injection"),(0,r.kt)("p",null,"There are two ways to inject Miam components into the host app:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"with ",(0,r.kt)("strong",{parentName:"li"},"Jetpack Compose")," (preferred as nothing has to be changed on the component itself, except\nstyling adjustments)"),(0,r.kt)("li",{parentName:"ul"},"by injecting ",(0,r.kt)("strong",{parentName:"li"},"your own full XML")," version of the component (a bit more complex, but lets you the\nfull flexibility of changing every aspects of the component)")),(0,r.kt)("h2",{id:"with-jetpack-compose-preferred"},"With Jetpack Compose (preferred)"),(0,r.kt)("p",null,"For the sake of the example, we will inject a component showing a recipe card in the host app."),(0,r.kt)("p",null,"Initialize a RecipeView object, passing your current context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val recipe = RecipeView(context)\n")),(0,r.kt)("p",null,'In Miam, recipe cards can either be "fixed" (= fetched by on a predefined ID) or "suggested" (=\nfetched based on the user navigation context)'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.miam.kmmMiamCore.miam_core.model.SuggestionsCriteria\n\n// Implemented in Miam SDK\ndata class SuggestionsCriteria(\n    // Ids of products displayed in the search results, right before and after the recipe card\n    val shelfIngredientsIds: List<String>? = null,\n    // Ids of products displayed on a product details page (optional)\n    val currentIngredientsIds: List<String>? = null,\n    // Ids of products already in app basket (optional)\n    val basketIngredientsIds: List<String>? = null,\n    // (optional)\n    val groupId: String? = null\n)\n\nval recipe1 = RecipeView(this@MainActivity)\nval recipe2 = RecipeView(this@MainActivity)\n\n// Instanciate a fixed recipe card\nrecipe1.bind(recipeId = 305)\n\n// Instanciate a suggested recipe card\nrecipe2.bind(\n    criteria = SuggestionsCriteria(\n        shelfIngredientsIds = listOf(\n            PRODUCT_ID_IN_APP,\n            PRODUCT_ID_IN_APP\n        )\n    )\n)\n\n// Inject in the page using Compose\nsetContent {\n    Column {\n        recipe1.Content()\n        recipe2.Content()\n    }\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"All injectable components definitions can be found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/androidSDK")," folder => have a look at each View file to discover which attributes must be passed to instantiate the view.")),(0,r.kt)("h2",{id:"with-xml-injection"},"With XML injection"),(0,r.kt)("p",null,"If you are not using Jetpack Compose, you can inject Miam recipe cards directly into your own XML\nView:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'\x3c!-- defined in layout/item_miam.xml --\x3e\n<com.miam.kmm_miam_sdk.android.ui.components.recipeCard.RecipeView\n        xmlns:android="http://schemas.android.com/apk/res/android"\n        xmlns:app="http://schemas.android.com/apk/res-auto" \n        android:layout_width="match_parent"\n        android:layout_height="wrap_content" \n  />\n')),(0,r.kt)("p",null,"And then bind the properties like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.miam.kmmMiamCore.miam_core.model.SuggestionsCriteria\n\n// Implemented in Miam SDK\ndata class SuggestionsCriteria(\n    // Ids of products displayed in the search results, right before and after the recipe card\n    val shelfIngredientsIds: List<String>? = null,\n    // Ids of products displayed on a product details page (optional)\n    val currentIngredientsIds: List<String>? = null,\n    // Ids of products already in app basket (optional)\n    val basketIngredientsIds: List<String>? = null,\n    // (optional)\n    val groupId: String? = null\n)\n\nval miamCard = R.layout.item_miam as RecipeView\n\nmiamCard.bind(\n    criteria = SuggestionsCriteria(\n        shelfIngredientsIds = listOf(\n            PRODUCT_ID_IN_APP,\n            PRODUCT_ID_IN_APP\n        )\n    )\n)\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Can also be done by replacing ",(0,r.kt)("inlineCode",{parentName:"p"},"R.layout.item_miam")," by the usual ",(0,r.kt)("inlineCode",{parentName:"p"},"findViewById"),"...")))}m.isMDXComponent=!0}}]);